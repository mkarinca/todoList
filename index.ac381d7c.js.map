{"mappings":"UACWA,GAWT,SAAAC,EAAeC,EAAMC,GACnBA,EAAWA,GAAAA,aAEXC,KAAKC,QAAUH,EAEVI,aAAaJ,KAKhBI,aAAaJ,GAAQK,KAAKC,UAJtBC,CACFC,MAAAA,MAMJP,EAASQ,KAAKP,KAAMG,KAAKK,MAAMN,aAAaJ,KAgB9CD,EAAMY,UAAUC,KAAO,SAAUC,EAAOZ,MACjCA,OAIDO,EAAQH,KAAKK,MAAMN,aAAaF,KAAKC,UAAUK,MAEnDP,EAASQ,KACPP,KACAM,EAAMM,QAAO,SAAUC,WACZC,KAAKH,KACRA,EAAMG,KAAOD,EAAKC,UACb,SAGJ,QAUbjB,EAAMY,UAAUM,QAAU,SAAUhB,IAClCA,EAAWA,GAAAA,cACFQ,KAAKP,KAAMG,KAAKK,MAAMN,aAAaF,KAAKC,UAAUK,QAW7DT,EAAMY,UAAUO,KAAO,SAAUC,EAAYlB,EAAUmB,OACjDb,EAAOF,KAAKK,MAAMN,aAAaF,KAAKC,UACpCK,EAAQD,EAAKC,MAEjBP,EAAWA,GAAAA,iBAGPoB,GAAAA,IAAYC,MAAOC,aAGnBH,EAAAA,SACOI,EAAI,EAAGA,EAAIhB,EAAMiB,OAAQD,OAC5BhB,EAAMgB,GAAGJ,KAAOA,EAAAA,SACTM,KAAOP,EACdX,EAAMgB,GAAGE,GAAOP,EAAWO,SAMjCtB,aAAaF,KAAKC,SAAWE,KAAKC,UAAUC,GAC5CN,EAASQ,KAAKP,KAAMM,QAGpBW,EAAWC,GAAKO,SAASN,GAEzBb,EAAMoB,KAAKT,GACXf,aAAaF,KAAKC,SAAWE,KAAKC,UAAUC,GAC5CN,EAASQ,KAAKP,KAAA,CAAOiB,KAUzBpB,EAAMY,UAAUkB,OAAS,SAAUT,EAAInB,WAGjC6B,EAFAvB,EAAOF,KAAKK,MAAMN,aAAaF,KAAKC,UACpCK,EAAQD,EAAKC,MAGRgB,EAAI,EAAGA,EAAIhB,EAAMiB,OAAQD,IAC5BhB,EAAMgB,GAAGJ,IAAMA,IACjBU,EAAStB,EAAMgB,GAAGJ,QAIbI,EAAI,EAAGA,EAAIhB,EAAMiB,OAAQD,IAC5BhB,EAAMgB,GAAGJ,IAAMU,GACjBtB,EAAMuB,OAAOP,EAAG,GAIpBpB,aAAaF,KAAKC,SAAWE,KAAKC,UAAUC,GAC5CN,EAASQ,KAAKP,KAAMM,IAQtBT,EAAMY,UAAUqB,KAAO,SAAU/B,OAC3BM,EAAAA,CAASC,MAAAA,IACbJ,aAAaF,KAAKC,SAAWE,KAAKC,UAAUC,GAC5CN,EAASQ,KAAKP,KAAMK,EAAKC,QAI3BV,EAAOmC,IAAMnC,EAAOmC,KAAAA,GACpBnC,EAAOmC,IAAIlC,MAAQA,GAClBD","sources":["./js/store.js"],"sourcesContent":["/*jshint eqeqeq:false */\n(function (window) {\n  \"use strict\";\n\n  /**\n   * Creates a new client side storage object and will create an empty\n   * collection if no collection already exists.\n   *\n   * @param {string} name The name of our DB we want to use\n   * @param {function} callback Our fake DB uses callbacks because in\n   * real life you probably would be making AJAX calls\n   */\n  function Store(name, callback) {\n    callback = callback || function () {};\n\n    this._dbName = name;\n\n    if (!localStorage[name]) {\n      var data = {\n        todos: [],\n      };\n\n      localStorage[name] = JSON.stringify(data);\n    }\n\n    callback.call(this, JSON.parse(localStorage[name]));\n  }\n\n  /**\n   * Finds items based on a query given as a JS object\n   *\n   * @param {object} query The query to match against (i.e. {foo: 'bar'})\n   * @param {function} callback\t The callback to fire when the query has\n   * completed running\n   *\n   * @example\n   * db.find({foo: 'bar', hello: 'world'}, function (data) {\n   *\t // data will return any items that have foo: bar and\n   *\t // hello: world in their properties\n   * });\n   */\n  Store.prototype.find = function (query, callback) {\n    if (!callback) {\n      return;\n    }\n\n    var todos = JSON.parse(localStorage[this._dbName]).todos;\n\n    callback.call(\n      this,\n      todos.filter(function (todo) {\n        for (var q in query) {\n          if (query[q] !== todo[q]) {\n            return false;\n          }\n        }\n        return true;\n      })\n    );\n  };\n\n  /**\n   * Will retrieve all data from the collection\n   *\n   * @param {function} callback The callback to fire upon retrieving data\n   */\n  Store.prototype.findAll = function (callback) {\n    callback = callback || function () {};\n    callback.call(this, JSON.parse(localStorage[this._dbName]).todos);\n  };\n\n  /**\n   * Will save the given data to the DB. If no item exists it will create a new\n   * item, otherwise it'll simply update an existing item's properties\n   *\n   * @param {object} updateData The data to save back into the DB\n   * @param {function} callback The callback to fire after saving\n   * @param {number} id An optional param to enter an ID of an item to update\n   */\n  Store.prototype.save = function (updateData, callback, id) {\n    var data = JSON.parse(localStorage[this._dbName]);\n    var todos = data.todos;\n\n    callback = callback || function () {};\n\n    // Generate an ID\n    var newId = new Date().getTime();\n\n    // If an ID was actually given, find the item and update each property\n    if (id) {\n      for (var i = 0; i < todos.length; i++) {\n        if (todos[i].id === id) {\n          for (var key in updateData) {\n            todos[i][key] = updateData[key];\n          }\n          break;\n        }\n      }\n\n      localStorage[this._dbName] = JSON.stringify(data);\n      callback.call(this, todos);\n    } else {\n      // Assign an ID\n      updateData.id = parseInt(newId);\n\n      todos.push(updateData);\n      localStorage[this._dbName] = JSON.stringify(data);\n      callback.call(this, [updateData]);\n    }\n  };\n\n  /**\n   * Will remove an item from the Store based on its ID\n   *\n   * @param {number} id The ID of the item you want to remove\n   * @param {function} callback The callback to fire after saving\n   */\n  Store.prototype.remove = function (id, callback) {\n    var data = JSON.parse(localStorage[this._dbName]);\n    var todos = data.todos;\n    var todoId;\n\n    for (var i = 0; i < todos.length; i++) {\n      if (todos[i].id == id) {\n        todoId = todos[i].id;\n      }\n    }\n\n    for (var i = 0; i < todos.length; i++) {\n      if (todos[i].id == todoId) {\n        todos.splice(i, 1);\n      }\n    }\n\n    localStorage[this._dbName] = JSON.stringify(data);\n    callback.call(this, todos);\n  };\n\n  /**\n   * Will drop all storage and start fresh\n   *\n   * @param {function} callback The callback to fire after dropping the data\n   */\n  Store.prototype.drop = function (callback) {\n    var data = { todos: [] };\n    localStorage[this._dbName] = JSON.stringify(data);\n    callback.call(this, data.todos);\n  };\n\n  // Export to window\n  window.app = window.app || {};\n  window.app.Store = Store;\n})(window);\n"],"names":["window","Store","name","callback","this","_dbName","localStorage","JSON","stringify","data","todos","call","parse","prototype","find","query","filter","todo","q","findAll","save","updateData","id","newId","Date","getTime","i","length","key","parseInt","push","remove","todoId","splice","drop","app"],"version":3,"file":"index.ac381d7c.js.map"}