{"mappings":"UAAWA,GASV,SAAAC,EAAeC,GACdC,KAAKD,QAAUA,EAShBD,EAAMG,UAAUC,OAAS,SAAUC,EAAOC,GAEzCA,EAAWA,GAAAA,iBAEPC,EAAAA,CACHF,OAJDA,EAAQA,GAAS,IAIHG,OACbC,WAAW,GAGZP,KAAKD,QAAQS,KAAKH,EAASD,IAkB5BN,EAAMG,UAAUQ,KAAO,SAAUC,EAAON,OACnCO,SAAmBD,KACvBN,EAAWA,GAAAA,aAEO,aAAdO,SACHP,EAAWM,EACJV,KAAKD,QAAQa,QAAQR,GACJ,WAAdO,GAAwC,WAAdA,GACpCD,EAAQG,SAASH,EAAO,IACxBV,KAAKD,QAAQe,KAAAA,CAAOC,GAAIL,GAASN,IAEjCJ,KAAKD,QAAQe,KAAKJ,EAAON,IAY3BN,EAAMG,UAAUe,OAAS,SAAUD,EAAIE,EAAMb,GAC5CJ,KAAKD,QAAQS,KAAKS,EAAMb,EAAUW,IASnCjB,EAAMG,UAAUiB,OAAS,SAAUH,EAAIX,GACtCJ,KAAKD,QAAQmB,OAAOH,EAAIX,IAQzBN,EAAMG,UAAUkB,UAAY,SAAUf,GACrCJ,KAAKD,QAAQqB,KAAKhB,IAMnBN,EAAMG,UAAUoB,SAAW,SAAUjB,OAChCkB,EAAAA,CACHC,OAAQ,EACRhB,UAAW,EACXiB,MAAO,GAGRxB,KAAKD,QAAQa,SAAQ,SAAUK,GAC9BA,EAAKQ,SAAQ,SAAUC,GAClBA,EAAKnB,UACRe,EAAMf,YAENe,EAAMC,SAGPD,EAAME,WAEPpB,EAASkB,OAKXzB,EAAO8B,IAAM9B,EAAO8B,KAAAA,GACpB9B,EAAO8B,IAAI7B,MAAQA,GACjBD","sources":["./js/model.js"],"sourcesContent":["(function (window) {\n\t'use strict';\n\n\t/**\n\t * Creates a new Model instance and hooks up the storage.\n\t *\n\t * @constructor\n\t * @param {object} storage A reference to the client side storage class\n\t */\n\tfunction Model(storage) {\n\t\tthis.storage = storage;\n\t}\n\n\t/**\n\t * Creates a new todo model\n\t *\n\t * @param {string} [title] The title of the task\n\t * @param {function} [callback] The callback to fire after the model is created\n\t */\n\tModel.prototype.create = function (title, callback) {\n\t\ttitle = title || '';\n\t\tcallback = callback || function () {};\n\n\t\tvar newItem = {\n\t\t\ttitle: title.trim(),\n\t\t\tcompleted: false\n\t\t};\n\n\t\tthis.storage.save(newItem, callback);\n\t};\n\n\t/**\n\t * Finds and returns a model in storage. If no query is given it'll simply\n\t * return everything. If you pass in a string or number it'll look that up as\n\t * the ID ofÂ the model to find. Lastly, you can pass it an object to match\n\t * against.\n\t *\n\t * @param {string|number|object} [query] A query to match models against\n\t * @param {function} [callback] The callback to fire after the model is found\n\t *\n\t * @example\n\t * model.read(1, func); // Will find the model with an ID of 1\n\t * model.read('1'); // Same as above\n\t * //Below will find a model with foo equalling bar and hello equalling world.\n\t * model.read({ foo: 'bar', hello: 'world' });\n\t */\n\tModel.prototype.read = function (query, callback) {\n\t\tvar queryType = typeof query;\n\t\tcallback = callback || function () {};\n\n\t\tif (queryType === 'function') {\n\t\t\tcallback = query;\n\t\t\treturn this.storage.findAll(callback);\n\t\t} else if (queryType === 'string' || queryType === 'number') {\n\t\t\tquery = parseInt(query, 10);\n\t\t\tthis.storage.find({ id: query }, callback);\n\t\t} else {\n\t\t\tthis.storage.find(query, callback);\n\t\t}\n\t};\n\n\t/**\n\t * Updates a model by giving it an ID, data to update, and a callback to fire when\n\t * the update is complete.\n\t *\n\t * @param {number} id The id of the model to update\n\t * @param {object} data The properties to update and their new value\n\t * @param {function} callback The callback to fire when the update is complete.\n\t */\n\tModel.prototype.update = function (id, data, callback) {\n\t\tthis.storage.save(data, callback, id);\n\t};\n\n\t/**\n\t * Removes a model from storage\n\t *\n\t * @param {number} id The ID of the model to remove\n\t * @param {function} callback The callback to fire when the removal is complete.\n\t */\n\tModel.prototype.remove = function (id, callback) {\n\t\tthis.storage.remove(id, callback);\n\t};\n\n\t/**\n\t * WARNING: Will remove ALL data from storage.\n\t *\n\t * @param {function} callback The callback to fire when the storage is wiped.\n\t */\n\tModel.prototype.removeAll = function (callback) {\n\t\tthis.storage.drop(callback);\n\t};\n\n\t/**\n\t * Returns a count of all todos\n\t */\n\tModel.prototype.getCount = function (callback) {\n\t\tvar todos = {\n\t\t\tactive: 0,\n\t\t\tcompleted: 0,\n\t\t\ttotal: 0\n\t\t};\n\n\t\tthis.storage.findAll(function (data) {\n\t\t\tdata.forEach(function (todo) {\n\t\t\t\tif (todo.completed) {\n\t\t\t\t\ttodos.completed++;\n\t\t\t\t} else {\n\t\t\t\t\ttodos.active++;\n\t\t\t\t}\n\n\t\t\t\ttodos.total++;\n\t\t\t});\n\t\t\tcallback(todos);\n\t\t});\n\t};\n\n\t// Export to window\n\twindow.app = window.app || {};\n\twindow.app.Model = Model;\n})(window);\n"],"names":["window","Model","storage","this","prototype","create","title","callback","newItem","trim","completed","save","read","query","queryType","findAll","parseInt","find","id","update","data","remove","removeAll","drop","getCount","todos","active","total","forEach","todo","app"],"version":3,"file":"index.5a5c7fa5.js.map"}